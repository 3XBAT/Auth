// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Auth is an autogenerated mock type for the Auth type
type Auth struct {
	mock.Mock
}

type Auth_Expecter struct {
	mock *mock.Mock
}

func (_m *Auth) EXPECT() *Auth_Expecter {
	return &Auth_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *Auth) Login(ctx context.Context, username string, password string) (string, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Auth_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Auth_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *Auth_Expecter) Login(ctx interface{}, username interface{}, password interface{}) *Auth_Login_Call {
	return &Auth_Login_Call{Call: _e.mock.On("Login", ctx, username, password)}
}

func (_c *Auth_Login_Call) Run(run func(ctx context.Context, username string, password string)) *Auth_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Auth_Login_Call) Return(token string, err error) *Auth_Login_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *Auth_Login_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *Auth_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterNewUser provides a mock function with given fields: ctx, name, username, password
func (_m *Auth) RegisterNewUser(ctx context.Context, name string, username string, password string) (int, error) {
	ret := _m.Called(ctx, name, username, password)

	if len(ret) == 0 {
		panic("no return value specified for RegisterNewUser")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (int, error)); ok {
		return rf(ctx, name, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int); ok {
		r0 = rf(ctx, name, username, password)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Auth_RegisterNewUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterNewUser'
type Auth_RegisterNewUser_Call struct {
	*mock.Call
}

// RegisterNewUser is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - username string
//   - password string
func (_e *Auth_Expecter) RegisterNewUser(ctx interface{}, name interface{}, username interface{}, password interface{}) *Auth_RegisterNewUser_Call {
	return &Auth_RegisterNewUser_Call{Call: _e.mock.On("RegisterNewUser", ctx, name, username, password)}
}

func (_c *Auth_RegisterNewUser_Call) Run(run func(ctx context.Context, name string, username string, password string)) *Auth_RegisterNewUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Auth_RegisterNewUser_Call) Return(userID int, err error) *Auth_RegisterNewUser_Call {
	_c.Call.Return(userID, err)
	return _c
}

func (_c *Auth_RegisterNewUser_Call) RunAndReturn(run func(context.Context, string, string, string) (int, error)) *Auth_RegisterNewUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuth creates a new instance of Auth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *Auth {
	mock := &Auth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
